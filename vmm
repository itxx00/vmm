#!/bin/bash
#
#
VERSION=0.1
MIRROR=http://cloud.centos.org/centos/7/images
#MIRROR=http://mirrors.aliyun.com/fedora/releases/23/Cloud/x86_64/Images
IMG=CentOS-7-x86_64-GenericCloud.qcow2
#IMG=Fedora-Cloud-Base-23-20151030.x86_64.qcow2
DROOT=/data
CROOT=$HOME/.vmm
VMLIST=$CROOT/vms
VmDataDiskSize=50G
IPSTART=192.168.199.2
IPEND=192.168.199.99
GATEWAY=192.168.199.1
NETMASK=255.255.255.0
DNS1=114.114.114.114
DNS2=114.114.115.115

usage() {
    echo "
Usage: vmm [OPTIONS] COMMAND [arg...]

Create and manage virtual machines.

Version: $VERSION

Options:
  --help, -h                        show help
  --version, -v                     print the version

Commands:
  active        Print which vm is active
  create        Create a vm
  inspect       Inspect information about a vm
  ip            Get the IP address of a vm
  kill          Kill a vm
  ls            List vms
  restart       Restart a vm
  rm            Remove a vm
  ssh           Log into or run a command on a vm with SSH.
  start         Start a vm
  status        Get the status of a vm
  stop          Stop a vm
  console       Open console of a vm
"
    exit
}

init_env() {
    [ -d $DROOT ] || {
        echo "cannot find $DROOT dir, you need to create it"
        return 1
    }
    [ -d $DROOT/img ] || mkdir $DROOT/img
    [ -d $CROOT ] || mkdir $CROOT
    touch $VMLIST
    brctl show|grep -q br0
    [ $? -eq 0 ] || {
        echo "cannot find br0,you need to create it"
        return 1
    }
    [[ -x $(which virsh) ]] || {
        if grep -qi 'ubuntu\|debian' /etc/issue; then
            apt-get -y install libvirt-daemon libvirt-clients dnsmasq ebtables \
                bridge-utils libvirt-daemon-system \
                libguestfs-tools qemu-utils
        elif grep -qi 'fedora\|centos' /etc/os-release; then
            yum -y install libvirt-daemon libvirt-client dnsmasq ebtables \
                bridge-utils libguestfs-tools-c qemu-img
        else
            echo "system not supported yet"
            return 1
        fi
    }
    [ -f $DROOT/img/$IMG ] || {
        cd $DROOT/img &&
        wget -c $MIRROR/$IMG.xz && xz -d $IMG.xz || {
            wget -c $MIRROR/$IMG
        }
    }

    [ -f /usr/bin/qemu-vmm ] || {
        kvm=""
        [ -f /usr/libexec/qemu-kvm  ] && kvm=/usr/libexec/qemu-kvm
        [ -f /usr/bin/qemu-kvm ] && kvm=/usr/bin/qemu-kvm
        [ -f /usr/bin/kvm  ] && kvm=/usr/bin/kvm
        if [[ -n $kvm ]]; then
            echo -e "#!/bin/sh\nexec $kvm \"\$@\"" >/usr/bin/qemu-vmm
            chmod +x /usr/bin/qemu-vmm
        else
            echo "cannot find qemu-kvm"
            return 1
        fi
    }
}

inject_pwd() {
    local vm="$1"
    local user="$2"
    local pwd="$3"
    hash=$(python3 -c "import crypt; print(crypt.crypt('$pwd', crypt.mksalt(crypt.METHOD_SHA512)))")
    es_hash=$(echo $hash|sed 's#\/#\\/#g;s#\$#\\$#g')
    virt-edit -d $vm /etc/shadow -e "s/^$user:.*?:/$user:$es_hash:/"
}

inject_key() {
    local vm="$1"
    local user="$2"
    local sshkey=$CROOT/id_rsa
    [ -f $sshkey ] || {
        cd $CROOT
        ssh-keygen -q -N "" -t rsa -f id_rsa
    }
    workd=~/.tmpworkdir.$RANDOM/
    mkdir $workd && cd $workd
    mkdir .ssh && chmod 700 .ssh
    cp ${sshkey}.pub .ssh/authorized_keys
    chmod 600 .ssh/authorized_keys
    homedir=/home/$user
    [[ $user = root ]] && homedir=/root
    virt-copy-in -d $vm .ssh $homedir/
    cd ~ && rm -fr $workd
}

define_vm() {
    local vm="$1"
    local tmpxml=$(mktemp)
    cat >>$tmpxml<<EOF
<domain type='kvm'>
  <name>$vm</name>
  <memory unit='KiB'>8192000</memory>
  <currentMemory unit='KiB'>8192000</currentMemory>
  <vcpu placement='static'>4</vcpu>
  <os>
    <type arch='x86_64'>hvm</type>
    <boot dev='hd'/>
  </os>
  <features>
    <acpi/>
    <apic/>
    <pae/>
  </features>
  <cpu mode='host-passthrough'>
    <topology sockets='1' cores='4' threads='1'/>
  </cpu>
  <clock offset='utc'>
    <timer name='rtc' tickpolicy='catchup' track='guest'/>
  </clock>
  <devices>
    <emulator>/usr/bin/qemu-vmm</emulator>
    <disk type='file' device='disk'>
      <driver name='qemu' type='qcow2'/>
      <source file='$DROOT/img/$vm.root'/>
      <target dev='vda' bus='virtio'/>
    </disk>
    <disk type='file' device='disk'>
      <driver name='qemu' type='qcow2'/>
      <source file='$DROOT/img/$vm.data'/>
      <target dev='vdb' bus='virtio'/>
    </disk>
    <interface type='bridge'>
      <source bridge='br0'/>
      <model type='virtio'/>
    </interface>
    <graphics type='vnc' port='-1' passwd='vmm' autoport='yes'/>
  </devices>
</domain>
EOF
    virsh define $tmpxml >/dev/null
    [ $? -eq 0 ] || {
        echo "failed to define $vm from $tmpxml"
        return 1
    }
    /bin/rm $tmpxml
}

create_disk() {
    local vm="$1"
    cd $DROOT/img || {
        echo "cannot find $DROOT/img"
        return 1
    }
    ( [ -f $vm.root ] || [ -f $vm.data ] )  && {
        echo "$vm disk exist,cannot continue"
        return 1
    }
    qemu-img create -f qcow2 -b $IMG $vm.root >/dev/null || return 1
    qemu-img create -f qcow2 $vm.data $VmDataDiskSize >/dev/null || return 1
}

INET_ATON() {
    local IFS=. ip
    ip=($*)
    echo $(((ip[0] << 24) + (ip[1] << 16) + (ip[2] << 8) + ip[3]))
}

INET_NTOA() {
    echo $(($1 >> 24)).$((($1 >> 16) % 256)).$((($1 >> 8) % 256)).$(($1 % 256))
}

gen_ip() {
    local ip
    local ipstart=$(INET_ATON $IPSTART)
    local ipend=$(INET_ATON $IPEND)
    for ((i = $ipstart; i <= $ipend; i++)); do
        p=$(INET_NTOA $i)
        if ! grep -wq "$p" $VMLIST; then
            ip=$p
            break
        fi
    done
    [[ -n $ip ]] || return 1
    echo $ip
}

inject_netconf() {
    local vm="$1"
    local ip="$2"
    workd=~/.tmpworkdir.$RANDOM/
    mkdir $workd && cd $workd
    cat >>ifcfg-eth0<<EOF
DEVICE=eth0
BOOTPROTO=none
ONBOOT=yes
TYPE=Ethernet
PEERDNS=yes
IPV6INIT=no
IPADDR=$ip
GATEWAY=$GATEWAY
NETMASK=$NETMASK
DNS1=$DNS1
DNS2=$DNS2
EOF
    virt-copy-in -d $vm ifcfg-eth0 /etc/sysconfig/network-scripts/
    cd ~ && rm -fr $workd
}

update_conf() {
    local act="$1"
    local vm="$2"
    local ip="$3"
    if [[ $act = d ]]; then
        sed -i "/^$vm /d" $VMLIST
        return
    fi
    if grep -q "^$vm " $VMLIST; then
        echo "err, $vm already added to hosts"
        return 1
    fi
    echo "$vm $ip" >>$VMLIST
}

die() {
    echo "last step failed"
    exit 1
}

vm_rm() {
    local vm=$1
    virsh domstate $vm >/dev/null 2>&1 || {
        echo "already removed"
        return
    }
    virsh destroy "$vm" &>>/dev/null
    virsh undefine "$vm" &>>/dev/null
    rm $DROOT/img/$vm.*
    update_conf d $vm
    echo "$vm removed"
}

vm_create() {
    local vm=$1
    local ip
    virsh domstate $vm >/dev/null 2>&1 && {
        echo "already exist"
        return
    }
    define_vm "$vm" || die
    create_disk "$vm" || die
    inject_key "$vm" root || die
    #inject_pwd "$vm" root centos7
    ip=$(gen_ip || die)
    inject_netconf "$vm" "$ip" || die
    update_conf a "$vm" "$ip"
    virsh start "$vm" >/dev/null
    echo "$ip"
}

vm_getip() {
    local vm=$1
    grep "^$vm " $VMLIST | awk '{print $2}'
}

vm_ssh() {
    local vm=$1
    local user=$2
    local sshkey=$CROOT/id_rsa
    local ip=$(vm_getip $vm)
    ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -i $sshkey $user@$ip
}

vm_ping() {
    local vm=$1
    local ip=$(vm_getip $vm)
    ping -c3 $ip
}
vm_inspect() {
    local vm=$1
    grep "^$vm " $VMLIST
}

vm_console() {
    local vm=$1
    local vncport=$(virsh vncdisplay $vm)
    local password=$RANDOM
    [ $? -eq 0 ] || {
        echo "err: cannot get vnc port"
        return 1
    }
    local cli=$(which vncviewer)
    virsh qemu-monitor-command $vm --hmp change vnc password $password
    [[ -x $cli ]] && {
        echo "127.0.0.1${vncport} password: $password"
        echo $password | $cli -autopass 127.0.0.1${vncport} &
        return
    }
}

init_env || die
act=$1
vm=$2
[[ -n "$act" ]] || usage
case $act in
    create)
        [ $# -eq 2 ] || usage
        vm_create $vm
        ;;
    rm)
        [ $# -eq 2 ] || usage
        vm_rm $vm
        ;;
    ls)
        virsh list --all
        ;;
    active)
        virsh list
        ;;
    start)
        [ $# -eq 2 ] || usage
        virsh start $vm
        ;;
    stop)
        [ $# -eq 2 ] || usage
        virsh shutdown $vm
        ;;
    restart)
        [ $# -eq 2 ] || usage
        virsh reboot $vm
        ;;
    status)
        [ $# -eq 2 ] || usage
        virsh domstate $vm
        ;;
    kill)
        [ $# -eq 2 ] || usage
        virsh destroy $vm
        ;;
    inspect|info)
        [ $# -eq 2 ] || usage
        vm_inspect $vm
        ;;
    ip)
        [ $# -eq 2 ] || usage
        vm_getip $vm
        ;;
    ssh)
        [ $# -eq 2 ] || usage
        vm_ssh $vm root
        ;;
    ping)
        [ $# -eq 2 ] || usage
        vm_ping $vm
        ;;
    console)
        [ $# -eq 2 ] || usage
        vm_console $vm
        ;;
    -v|--version)
        echo $VERSION
        ;;
    *)
        usage
        ;;
esac

